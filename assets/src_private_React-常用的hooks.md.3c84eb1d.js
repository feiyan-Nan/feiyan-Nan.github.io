import{_ as n,c as s,o as a,d as t}from"./app.00f96e96.js";const y='{"title":"React-\u5E38\u7528\u7684hooks","description":"","frontmatter":{},"headers":[{"level":2,"title":"useRefCallback","slug":"userefcallback"},{"level":2,"title":"useModal","slug":"usemodal"},{"level":2,"title":"\u8BBE\u8BA1useFetch","slug":"\u8BBE\u8BA1usefetch"},{"level":3,"title":"\u6DFB\u52A0useFetch","slug":"\u6DFB\u52A0usefetch"},{"level":3,"title":"\u5C01\u88C5request","slug":"\u5C01\u88C5request"},{"level":3,"title":"\u5C01\u88C5\u8BF7\u6C42\u65B9\u6CD5","slug":"\u5C01\u88C5\u8BF7\u6C42\u65B9\u6CD5"},{"level":3,"title":"\u6DFB\u52A0\u8BF7\u6C42\u6587\u4EF6","slug":"\u6DFB\u52A0\u8BF7\u6C42\u6587\u4EF6"},{"level":3,"title":"\u5F15\u7528\u7EC4\u4EF6","slug":"\u5F15\u7528\u7EC4\u4EF6"},{"level":3,"title":"\u4F7F\u7528useFetch","slug":"\u4F7F\u7528usefetch"},{"level":3,"title":"\u4F7F\u7528useFetchInterceptor","slug":"\u4F7F\u7528usefetchinterceptor"}],"relativePath":"src/private/React-\u5E38\u7528\u7684hooks.md","lastUpdated":1649840977682}',p={},o=t(`<h1 id="react-\u5E38\u7528\u7684hooks" tabindex="-1">React-\u5E38\u7528\u7684hooks <a class="header-anchor" href="#react-\u5E38\u7528\u7684hooks" aria-hidden="true">#</a></h1><h2 id="userefcallback" tabindex="-1">useRefCallback <a class="header-anchor" href="#userefcallback" aria-hidden="true">#</a></h2><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRef<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> useRefCallback<span class="token operator">&lt;</span><span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">F</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  func<span class="token punctuation">.</span>current <span class="token operator">=</span> fn<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> func<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="usemodal" tabindex="-1">useModal <a class="header-anchor" href="#usemodal" aria-hidden="true">#</a></h2><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> getUniqueKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>_<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">UseModalReturn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  show<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token function-variable function">open</span><span class="token operator">:</span> <span class="token punctuation">(</span>nextState<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function-variable function">close</span><span class="token operator">:</span> <span class="token punctuation">(</span>reset<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  setData<span class="token operator">:</span> React<span class="token punctuation">.</span>Dispatch<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>SetStateAction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * \u63D0\u4F9B state \u53CA show, close \u65B9\u6CD5\u7684 Hook\uFF0C\u7528\u4E8E\u5904\u7406 Dialog, Drawer \u7684\u6253\u5F00\u3001\u5173\u95ED
 * show, close \u7684\u5F15\u7528\u4E0D\u4F1A\u6539\u53D8\uFF0C\u53EF\u4EE5\u5B89\u5168\u7684\u4ECE\u4F9D\u8D56\u5217\u8868\u4E2D\u7701\u7565
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useModal</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>defaultState<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> UseModalReturn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> setShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>defaultState <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6709\u65F6\u9700\u8981\u5728\u7EC4\u4EF6\u663E\u793A\u65F6\u91CD\u7F6E\u4E00\u4E0B</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> setKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">getUniqueKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> open <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nextState<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setKey</span><span class="token punctuation">(</span><span class="token function">getUniqueKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> handleReset <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span>defaultState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> close <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reset <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handleReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    key<span class="token punctuation">,</span>
    show<span class="token punctuation">,</span>
    data<span class="token operator">:</span> state<span class="token punctuation">,</span>
    open<span class="token punctuation">,</span>
    close<span class="token punctuation">,</span>
    setData<span class="token operator">:</span> setState<span class="token punctuation">,</span>
    reset<span class="token operator">:</span> handleReset<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u8BBE\u8BA1usefetch" tabindex="-1">\u8BBE\u8BA1useFetch <a class="header-anchor" href="#\u8BBE\u8BA1usefetch" aria-hidden="true">#</a></h2><h3 id="\u6DFB\u52A0usefetch" tabindex="-1">\u6DFB\u52A0useFetch <a class="header-anchor" href="#\u6DFB\u52A0usefetch" aria-hidden="true">#</a></h3><p>\u9876\u5C42\u7EC4\u4EF6\u8BB0\u5F97\u4F7F\u7528\u5F15\u7528<code>FetchContext</code>\u5305\u88C5</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> createContext<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useRefCallback <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/useRefCallback&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">CB</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">FetchFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cb<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">CB</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> FetchContext <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> FetchFun<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFetch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>FetchContext<span class="token punctuation">)</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> handleFetch <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> cb<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">CB</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not attached</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">request</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setData</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cb <span class="token operator">&amp;&amp;</span> <span class="token function">cb</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>request<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> reset <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">,</span>
    loading<span class="token punctuation">,</span>
    fetch<span class="token operator">:</span> handleFetch<span class="token punctuation">,</span>
    reset<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFetchInterceptor</span><span class="token punctuation">(</span>
  <span class="token function-variable function">interceptor</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    callback<span class="token operator">:</span> <span class="token constant">CB</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    next<span class="token operator">:</span> FetchFun
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>FetchContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> interceptorWrap <span class="token operator">=</span> <span class="token function">useRefCallback</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> wrappedContext <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      acc<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> <span class="token constant">CB</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">interceptorWrap</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> context<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> acc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>context<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> wrappedContext<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> useFetch<span class="token punctuation">;</span>
</code></pre></div><h3 id="\u5C01\u88C5request" tabindex="-1">\u5C01\u88C5request <a class="header-anchor" href="#\u5C01\u88C5request" aria-hidden="true">#</a></h3><div class="language-ts"><pre><code><span class="token comment">// template\`/user/detail/\${&#39;id&#39;}\`</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">template</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> <span class="token operator">...</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">toStringURL</span><span class="token operator">:</span> <span class="token punctuation">(</span>dict<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> strings<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function-variable function">getKeys</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> keys<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u8FC7\u6EE4 0 null \u2018\u2019 false \u7B49\u503C</span>
<span class="token keyword">function</span> <span class="token function">filterFalsy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> resultObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>obj<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>resultObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">!</span>resultObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">delete</span> resultObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> resultObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// url\u4F7F\u7528template\u5199</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">fetchJson</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> url <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">toStringURL</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// lodash omit</span>
    option<span class="token punctuation">.</span>params <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">omit</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>params<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> method <span class="token operator">=</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> paramString <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">filterFalsy</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>isExport <span class="token operator">?</span> paramString <span class="token operator">:</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>paramString<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> url<span class="token punctuation">;</span>
    
    
  <span class="token keyword">const</span> defaultOption <span class="token operator">=</span> <span class="token punctuation">{</span>
    url<span class="token operator">:</span> api<span class="token punctuation">,</span>
    method<span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    extraOption<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5BF9\u4E8E\u8FD9\u51E0\u4E2A\u65B9\u6CD5\u90FD\u9700\u8981\u63D0\u9192</span>
      notify<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PATCH&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// \u4E0D\u8BA9axios\u62E6\u622A\u9519\u8BEFstatus code</span>
    <span class="token function-variable function">validateStatus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
	
   <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>defaultOption<span class="token punctuation">,</span> <span class="token punctuation">{</span>
       data<span class="token operator">:</span> option<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
       <span class="token operator">...</span>_<span class="token punctuation">.</span><span class="token function">omit</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token string">&#39;params&#39;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>checkResponseCode<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>checkResponseCode<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>checkDataStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">checkResponseCode</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isRespNormal <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>response<span class="token punctuation">.</span>status<span class="token punctuation">;</span>

    <span class="token keyword">const</span> code <span class="token operator">=</span> isRespNormal <span class="token operator">?</span> response<span class="token punctuation">.</span>status <span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&#39;response.status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> isRespNormal <span class="token operator">?</span> response<span class="token punctuation">.</span>data <span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&#39;response.data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
    <span class="token keyword">switch</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">200</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                status<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span>
                message<span class="token operator">:</span> data<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
                page<span class="token operator">:</span> data<span class="token punctuation">.</span>page<span class="token punctuation">,</span>
                data<span class="token punctuation">,</span>
                response
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                status<span class="token operator">:</span> <span class="token string">&#39;invalid&#39;</span><span class="token punctuation">,</span>
                message<span class="token operator">:</span> data<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
                response
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">checkDataStatus</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> config <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;response.config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">200</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// \u5982\u679C\u67D0\u4E2A Action \u4E0D\u9700\u8981\u6D88\u606F\u63D0\u9192\uFF0C\u8BBE\u7F6E extraOption.notify=false \u5C31\u53EF\u4EE5\u4E86;</span>
          <span class="token keyword">const</span> isNotify <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">&#39;extraOption.notify&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          isNotify <span class="token operator">&amp;&amp;</span> Alert<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&#39;\u64CD\u4F5C\u6210\u529F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">&#39;\u64CD\u4F5C\u5931\u8D25&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
         <span class="token comment">// ...</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="\u5C01\u88C5\u8BF7\u6C42\u65B9\u6CD5" tabindex="-1">\u5C01\u88C5\u8BF7\u6C42\u65B9\u6CD5 <a class="header-anchor" href="#\u5C01\u88C5\u8BF7\u6C42\u65B9\u6CD5" aria-hidden="true">#</a></h3><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchHookCB</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">requestCallback</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> config<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fetchJson</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">fetchHookCB</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u6DFB\u52A0\u8BF7\u6C42\u6587\u4EF6" tabindex="-1">\u6DFB\u52A0\u8BF7\u6C42\u6587\u4EF6 <a class="header-anchor" href="#\u6DFB\u52A0\u8BF7\u6C42\u6587\u4EF6" aria-hidden="true">#</a></h3><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">FetchType</span> <span class="token punctuation">{</span>
    <span class="token constant">GET_DETAIL</span> <span class="token operator">=</span> <span class="token string">&#39;GET_DETAIL&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">useDetail</span><span class="token punctuation">(</span>otherParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fetchMap <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token punctuation">[</span>FetchType<span class="token punctuation">.</span><span class="token constant">GET_DETAIL</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">requestCallback</span><span class="token punctuation">(</span>template<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/detail/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token string">&#39;id&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span>params<span class="token punctuation">,</span> <span class="token operator">...</span>otherParams<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> fetchMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5F15\u7528\u7EC4\u4EF6" tabindex="-1">\u5F15\u7528\u7EC4\u4EF6 <a class="header-anchor" href="#\u5F15\u7528\u7EC4\u4EF6" aria-hidden="true">#</a></h3><p>\u7EC4\u4EF6\u9700\u8981\u5305\u88F9\u5230\u9876\u5C42\u7EC4\u4EF6\u5F53\u4E2D</p><div class="language-tsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FetchContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./useFetch&#39;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> detailMap <span class="token operator">=</span> <span class="token function">useDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>FetchContext<span class="token punctuation">.</span>Provider <span class="token punctuation">{</span>
            <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>detailMap<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>detailMap<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token operator">&gt;</span>
    	<span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FetchContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u4F7F\u7528usefetch" tabindex="-1">\u4F7F\u7528useFetch <a class="header-anchor" href="#\u4F7F\u7528usefetch" aria-hidden="true">#</a></h3><div class="language-tsx"><pre><code><span class="token keyword">import</span> useFetch <span class="token keyword">from</span> <span class="token string">&#39;./useFetch&#39;</span>
<span class="token keyword">function</span> <span class="token function">Detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> detail <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>FetchType<span class="token punctuation">.</span><span class="token constant">GET_DETAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        detail<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u8FD9\u91CC\u662F\u56DE\u8C03\u51FD\u6570&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>data<span class="token punctuation">,</span> detail<span class="token punctuation">.</span>loading<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u4F7F\u7528usefetchinterceptor" tabindex="-1">\u4F7F\u7528useFetchInterceptor <a class="header-anchor" href="#\u4F7F\u7528usefetchinterceptor" aria-hidden="true">#</a></h3><div class="language-tsx"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>useFetchInterceptor<span class="token punctuation">,</span> FetchContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./useFetch&#39;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> interceptor <span class="token operator">=</span> <span class="token function">useFetchInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> FetchType<span class="token punctuation">.</span><span class="token constant">GET_DETAIL</span><span class="token operator">:</span>
        	<span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">next</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FetchContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>interceptor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FetchContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre></div>`,22),c=[o];function e(u,l,k,i,r,d){return a(),s("div",null,c)}var g=n(p,[["render",e]]);export{y as __pageData,g as default};
